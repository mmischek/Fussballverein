package application;


import java.net.URL;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ResourceBundle;


import org.postgresql.ds.PGSimpleDataSource;
import org.postgresql.util.PSQLException;

import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.Tab;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableColumn.CellDataFeatures;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.util.Callback;

/**
 * 
 * @author Matthias Mischek
 * 
 */
public class Controller implements Initializable{

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub
		
	}
	
	@SuppressWarnings("rawtypes")
	private ObservableList<ObservableList> data;
	
	@SuppressWarnings("rawtypes")
	@FXML
	private TableView ausgabe, anzeige;
	
	@FXML
	private TextField eingabe, updateTextfield;
	
	@FXML
	private Button start, connectButton, auswahl, updateB, auswahlB, anzeigeB, dbeinfugen, deleteB, insertB, delete;
	
	@FXML
	private TextField ip, dbName, user, passwort, insnname, insvname, insNr, pnr, vname, nname;
	
	@FXML
	private Label status, selectText, hinzText, status2;
	
	@FXML
	private Tab abfragePane, updatePane, anzeigePane, insertPane;
	
	private PGSimpleDataSource ds;
	
	@SuppressWarnings("rawtypes")
	@FXML
	private ComboBox updateBox,updateBox2;
	
	private String[] updatear;
	
	private Connection con;


	/**
	 * Methode zum Verbinden zur Datenbank
	 * Zugangsdaten kann der User für ein TextField eingeben
	 * @param event
	 * @throws SQLException 
	 */
	public void connect(ActionEvent event) throws SQLException{
		
		data = FXCollections.observableArrayList();
		
		// Datenquelle erzeugen und konfigurieren
		ds = new PGSimpleDataSource();
		ds.setServerName(ip.getText());
		ds.setDatabaseName(dbName.getText());
		ds.setUser(user.getText());
		ds.setPassword(passwort.getText());
		// Verbindung herstellen
		try
		
		{
			
			this.con = ds.getConnection(); //Verbinden
			con.setAutoCommit(false);
			status.setText("Verbunden!");
			abfragePane.setDisable(false);
			updatePane.setDisable(false);
			anzeigePane.setDisable(false);
			insertPane.setDisable(false);
			con.setAutoCommit(false);
			//Exception handling
			}catch (PSQLException e) {
				con.rollback();
				System.err.println("Error");
				status.setText("Bitter erneut versuchen.");
				
			}
			catch (Exception se){
			con.rollback();
			System.err.println("Error");
			status.setText("Bitte erneut versuchen.");
			
		}
		
		
	}
	

	
	/**
	 * Methode für Insert
	 * Erstellt ein INSERT Statement und ließt Eingaben von User ein
	 * Ich habe die Tabelle "Person" von der SchokoDB verwendet
	 * @param event
	 * @throws SQLException 
	 */
	public void insert(ActionEvent event) throws SQLException{
		if (insNr.getText().matches("^-?\\d+$")) {

		
			   int num = Integer.parseInt(insNr.getText());
			   String vnam = insvname.getText();
			   String nnam = insnname.getText();
	try{
			
			Statement st = con.createStatement();
			
			con.setAutoCommit(false);
			
			st.executeUpdate("INSERT INTO Person VALUES (" + num + ", '" + vnam + "', '" + nnam + "')");
			hinzText.setText("erfolgreich hinzugefügt!");
		
			con.commit();
			
		}catch (PSQLException se){
			con.rollback();
			System.err.println("Error");
			selectText.setText("Error. Bitte korrigieren Sie ihre Eingabe.");
			hinzText.setText("INSERT ERROR!");
			
		}
		catch (Exception se){
			con.rollback();
			System.err.println("Error");
			selectText.setText("Error. Bitte korrigieren Sie ihre Eingabe.");
			hinzText.setText("INSERT ERROR!");
			
		}
			
		
	}else{
		hinzText.setText("Bitte für die Nummer nur Zahlen eingeben!");
		
	}
	}
	
	
	/**
	 * Methode zum Laden der Tabelle Person und fügt diese in eine TableView ein
	 * 
	 * @param event
	 * @throws SQLException 
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public void anzeige(ActionEvent event) throws SQLException{
		
		try{
			
			con = ds.getConnection();
			// Abfrage vorbereiten und ausführen
			Statement st = con.createStatement();
			con.setAutoCommit(false);
				ResultSet rs = st.executeQuery("select * from Person");
			
			pnr.setDisable(false);
			vname.setDisable(false);
			nname.setDisable(false);
			auswahlB.setDisable(false);
			
			for(int i=0 ; i<rs.getMetaData().getColumnCount(); i++){
                final int j = i;
				TableColumn col = new TableColumn(rs.getMetaData().getColumnName(i+1));
                col.setCellValueFactory(new Callback<CellDataFeatures<ObservableList,String>,ObservableValue<String>>(){                    
                    public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {                                                                                              
                        return new SimpleStringProperty(param.getValue().get(j).toString());                        
                    }                    
                });

                anzeige.getColumns().addAll(col); 
              
    
            }
			
			// Ergebnisse verarbeiten
			while (rs.next()) { // Cursor bewegen
				ObservableList<String> row = FXCollections.observableArrayList();
                for(int i=1 ; i<=rs.getMetaData().getColumnCount(); i++){
                    //Iterate Column
                    row.add(rs.getString(i));
                    
                }
              
                data.add(row);
			}
			updateBox.setItems(data);
			anzeige.setItems(data);
			con.commit();
			
			
		}catch (PSQLException se){
			con.rollback();
			System.err.println("Error");
			selectText.setText("Error. Bitte korrigieren Sie ihre Eingabe.");
			
		}
		catch (Exception se){
			con.rollback();
			System.err.println("Error");
			selectText.setText("Error. Bitte korrigieren Sie ihre Eingabe.");
			
		}
	
	
	
	

	}
	
	/**
	 * Methode für das Statement "Update"
	 * Ändert Datensätze
	 * @param event
	 */
	@FXML
	public void update(ActionEvent event){

		try{
			status2.setText("Datensatz wurde erfolgreich geaendert!");
			aktualisieren(event);
			Connection con = ds.getConnection();
			// Abfrage vorbereiten und ausführen
			Statement st = con.createStatement();
			st.executeUpdate("UPDATE person SET vorname=\'"+vname.getText()+"\', nachname=\'"+nname.getText()+"\', nummer=\'"+pnr.getText()+"\' WHERE nummer=\'"+updatear[0]+"\'");

		} catch (SQLException se){
			System.err.println("Update - Error");
			se.printStackTrace(System.err);
		}

	}
	
	/**
	 * Methode für das Statement "Delete"
	 * Löscht Datensätze aus der Tabelle
	 * Damit delete eines datensatzes in der Personen Tabelle musste ich zuerst den Verweis zu mitarbeiter in der Schokodb löschen 
	 * @param event
	 */
	@FXML
	public void delete(ActionEvent event){

		try{
			status2.setText("Datensatz wurde erfolgreich geloescht!");
			aktualisieren(event);
			Connection con = ds.getConnection();
			// Abfrage vorbereiten und ausführen
			Statement st = con.createStatement();
			st.executeUpdate("DELETE FROM person WHERE nummer=\'"+updatear[0]+"\'");

		} catch (SQLException se){
			System.err.println("Delete - Error");
			se.printStackTrace(System.err);
		}

	}
	
	/**
	 * Methode für die Auswahl der Datensätze bei Update und Insert 
	 * ComboBox gibt Daten TextField
	 * @param event
	 */
	@FXML
	public void auswahl(ActionEvent event){

		String input = updateBox.getValue()+"";

		input = input.substring(1,input.length()-1);

		updatear = input.split(", ");
		updateB.setDisable(false);

		pnr.setText(updatear[0]);
		vname.setText(updatear[1]);
		nname.setText(updatear[2]);

	}
	
	/**
	 * Löscht Anzeige und Tabelle
	 * @param event
	 */
	@FXML
	public void aktualisieren(ActionEvent event){
		anzeigeB.setDisable(false);
		dbeinfugen.setDisable(false );
		anzeige.getColumns().clear();
		data.clear();
		data = FXCollections.observableArrayList();
		connect(null);

	}
	
	
/**
 * Methode für Eingabe von Select Befehlen
 * @param event
 */
@SuppressWarnings({ "unchecked", "rawtypes" })
public void abfrage(ActionEvent event){
	
	try{
		Connection con = ds.getConnection();
		// Abfrage vorbereiten und ausführen
		Statement st = con.createStatement();
			ResultSet rs = st.executeQuery("select " + eingabe.getText());
		
		for(int i=0 ; i<rs.getMetaData().getColumnCount(); i++){
            final int j = i;
			TableColumn col = new TableColumn(rs.getMetaData().getColumnName(i+1));
            col.setCellValueFactory(new Callback<CellDataFeatures<ObservableList,String>,ObservableValue<String>>(){                    
                public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {                                                                                              
                    return new SimpleStringProperty(param.getValue().get(j).toString());                        
                }                    
            });

            ausgabe.getColumns().addAll(col); 
           

        }
		
		// Ergebnisse verarbeiten
		while (rs.next()) { // Cursor bewegen
			ObservableList<String> row = FXCollections.observableArrayList();
            for(int i=1 ; i<=rs.getMetaData().getColumnCount(); i++){
                //Iterate Column
                row.add(rs.getString(i));
                
            }
          
            data.add(row);
		}
		
		ausgabe.setItems(data);
		
		
	}catch (PSQLException se){
		System.err.println("Error");
		selectText.setText("Error. Bitte korrigieren Sie ihre Eingabe.");
		
	}
	catch (Exception se){
		System.err.println("Error");
		selectText.setText("Error. Bitte korrigieren Sie ihre Eingabe.");
		
	}
		
	
}
}
	

	
	

