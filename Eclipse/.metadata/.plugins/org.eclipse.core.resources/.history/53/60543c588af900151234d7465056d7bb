package application;


import java.net.URL;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ResourceBundle;

import org.postgresql.ds.PGSimpleDataSource;

import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableColumn.CellDataFeatures;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.util.Callback;

public class Controller implements Initializable{

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub
		
	}
	
	@SuppressWarnings("rawtypes")
	private ObservableList<ObservableList> data;
	
	@FXML
	private TableView ausgabe;
	
	@FXML
	private TextField eingabe;
	
	@FXML
	private Button start;

	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public void connect(ActionEvent event){
		System.out.println("Ausgabe:");
		data = FXCollections.observableArrayList();

		// Datenquelle erzeugen und konfigurieren
		 PGSimpleDataSource ds = new PGSimpleDataSource();
		 ds.setServerName("172.17.0.160");
		 ds.setDatabaseName("schokofabrik");
		 ds.setUser("schokouser");
		 ds.setPassword("schokoUser");
		 // Verbindung herstellen
		 try(
				 Connection con = ds.getConnection();
				 // Abfrage vorbereiten und ausf√ºhren
				 Statement st = con.createStatement();
				 ResultSet rs = st.executeQuery(eingabe.getText());){

				for(int i=0 ; i<rs.getMetaData().getColumnCount(); i++){
	                //We are using non property style for making dynamic table
	                final int j = i;
				
	                TableColumn col = new TableColumn(rs.getMetaData().getColumnName(i+1));
	                col.setCellValueFactory(new Callback<CellDataFeatures<ObservableList,String>,ObservableValue<String>>(){                    
	                    public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {                                                                                              
	                        return new SimpleStringProperty(param.getValue().get(j).toString());                        
	                    }                    
	                });

	                ausgabe.getColumns().addAll(col); 
	                System.out.println("Column ["+i+"] ");
	            }
			 
		 // Ergebnisse verarbeiten
		 while (rs.next()) { // Cursor bewegen
				ObservableList<String> row = FXCollections.observableArrayList();
                for(int i=1 ; i<=rs.getMetaData().getColumnCount(); i++){
                    //Iterate Column
                    row.add(rs.getString(i));
                     
                }
                Object[] arr = data.toArray();
    			System.err.println(data.size());
    			//adding data to tableView
    			ausgabe.setItems(data);
		 }
		 }
		 catch (SQLException se){
		  se.printStackTrace(System.err);
		 }
		
		
	}
	
}
