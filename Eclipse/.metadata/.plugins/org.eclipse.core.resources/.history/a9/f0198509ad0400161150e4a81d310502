package application;

import java.net.URL;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ResourceBundle;

import org.postgresql.ds.PGSimpleDataSource;
import org.postgresql.util.PSQLException;

import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.ProgressIndicator;
import javafx.scene.control.Tab;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableColumn.CellDataFeatures;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.util.Callback;

/**
 * 
 * @author Matthias Mischek
 * 
 */
public class Controller implements Initializable {

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub

	}

	
	
	@SuppressWarnings("rawtypes")
	private ObservableList<ObservableList> data;

	@SuppressWarnings("rawtypes")
	@FXML
	private TableView anzeige, anzeigeTwo;

	@FXML
	private TextField eingabe, updateTextfield, dateInsert, timeInsert, ergInsert, mannsInsert, gegInsert;

	@FXML
	private Button  connectButton, auswahl, updateB, auswahlB, anzeigeB, dbeinfugen, deleteB, insertB, delete, dbanzeigen, dbeinfuegen;

	@FXML
	private TextField ip, dbName, user, passwort, insnname, insvname, insNr, pnr, cash, pos, von, bis, geg, manns, erg, dateField, bezField, gegField;

	@FXML
	private Label status, hinzText, status2, spiellabel, spielerlabel, load1;

	@FXML
	private Tab updatePane, anzeigePane, insertPane, updateSpielT, anzeigeSpielT;

	private PGSimpleDataSource ds;

	@SuppressWarnings("rawtypes")
	@FXML
	private ComboBox updateBox, updateBoxTwo, ergField;

	private String[] updatear;

	private Connection con;

	/**
	 * Methode zum Verbinden zur Datenbank Zugangsdaten kann der User für ein
	 * TextField eingeben
	 * 
	 * @param event
	 * @throws SQLException
	 */
	@SuppressWarnings("unchecked")
	public void connect(ActionEvent event) throws SQLException {

		data = FXCollections.observableArrayList();

		// Datenquelle erzeugen und konfigurieren
		ds = new PGSimpleDataSource();
		ds.setServerName(ip.getText());
		ds.setDatabaseName(dbName.getText());
		ds.setUser(user.getText());
		ds.setPassword(passwort.getText());
		// Verbindung herstellen
		try

		{
			this.con = ds.getConnection(); // Verbinden
			status.setText("Verbunden!");
			
			updatePane.setDisable(false);
			anzeigePane.setDisable(false);
			insertPane.setDisable(false);
			updateSpielT.setDisable(false);
			anzeigeSpielT.setDisable(false);
			
			ObservableList<String> stand = FXCollections.observableArrayList("Sieg", "Unentschieden", "Niederlage");
			   
			   ergField.setItems(stand);

			// Exception handling
		} catch (PSQLException e) {
			System.err.println("Error");
			status.setText("Bitter erneut versuchen.");

		} catch (Exception se) {
			con.rollback();
			System.err.println("Error");
			status.setText("Bitte erneut versuchen.");

		}

	}

	/**
	 * Methode für Insert Erstellt ein INSERT Statement und ließt Eingaben von
	 * User ein Ich habe die Tabelle "Spiele" von der Fussballverein DB verwendet
	 * 
	 * @param event
	 * @throws SQLException
	 */
	public void insert(ActionEvent event) throws SQLException {
		// if (insNr.getText().matches("^-?\\d+$")) {

			//int num = Integer.parseInt(insNr.getText());
			String dateins = dateInsert.getText();
	
			String gegins = gegInsert.getText();
			String mannsIns = mannsInsert.getText();
			String ergIns = ergInsert.getText();
			System.out.println("INSERT INTO Spiel VALUES (" + dateins + ", '" + mannsIns + "', '" + gegins + "', '" + ergIns + "')");

			try {

				Statement st = con.createStatement();

				con.setAutoCommit(false);

				st.executeUpdate("INSERT INTO Spiel VALUES ('" + dateins + "', '" + mannsIns + "', '" + gegins + "', '" + ergIns + "')");
				
				hinzText.setText("erfolgreich hinzugefügt!");

				con.commit();

			} 
//				catch (PSQLException se) {
//				con.rollback();
//				
//				System.err.println("Error PSQL");
//				
//				hinzText.setText("INSERT ERROR!");
//
		//	}
	catch (NullPointerException se) {
				con.rollback();
				System.err.println("Error");
				
				hinzText.setText("INSERT ERROR!");

			}

	//	}
//		else {
//			hinzText.setText("Bitte für die Nummer nur Zahlen eingeben!");
//
//		}
	}

	/**
	 * Methode zum Laden der Tabelle Person und fügt diese in eine TableView ein
	 * 
	 * @param event
	 * @throws SQLException
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public void anzeige(ActionEvent event) throws SQLException {

		try {
			aktualisierenTwo(event);
			con = ds.getConnection();
			// Abfrage vorbereiten und ausführen
			Statement st = con.createStatement();
			con.setAutoCommit(false);
			ResultSet rs = st.executeQuery("select * from Spieler");
			anzeigeB.setDisable(true);
			dbeinfugen.setDisable(true);
			pnr.setDisable(false);
			pos.setDisable(false);
			cash.setDisable(false);
			auswahlB.setDisable(false);
			von.setDisable(false);
			bis.setDisable(false);

			for (int i = 0; i < rs.getMetaData().getColumnCount(); i++) {
				final int j = i;
				TableColumn col = new TableColumn(rs.getMetaData().getColumnName(i + 1));
				col.setCellValueFactory(
						new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
							public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
								return new SimpleStringProperty(param.getValue().get(j).toString());
							}
						});

				anzeige.getColumns().addAll(col);

			}

			// Ergebnisse verarbeiten
			while (rs.next()) { // Cursor bewegen
				ObservableList<String> row = FXCollections.observableArrayList();
				for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
					// Iterate Column
					row.add(rs.getString(i));

				}

				data.add(row);
			}
			updateBox.setItems(data);
			anzeige.setItems(data);
			con.commit();
			
		} catch (PSQLException se) {
			con.rollback();
			System.err.println("Error");
			spielerlabel.setText("Error. Bitte korrigieren Sie ihre Eingabe.");

		} catch (Exception se) {
			con.rollback();
			System.err.println("Error");
			spielerlabel.setText("Error. Bitte korrigieren Sie ihre Eingabe.");

		}

	}
	
	
	
	/**
	 * Methode zum Laden der Tabelle Person und fügt diese in eine TableView ein
	 * 
	 * @param event
	 * @throws SQLException
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public void anzeigeSpiel(ActionEvent event) throws SQLException {
		
		try {
			load1.setText("amk");
			data = FXCollections.observableArrayList();
			con = ds.getConnection();
			// Abfrage vorbereiten und ausführen
			Statement st = con.createStatement();
			con.setAutoCommit(false);
			ResultSet res = st.executeQuery("select * from Spiel");
			dbanzeigen.setDisable(true);
			dbeinfuegen.setDisable(true);
			dateField.setDisable(false);
			bezField.setDisable(false);
			gegField.setDisable(false);
			ergField.setDisable(false);
			

			for (int i = 0; i < res.getMetaData().getColumnCount(); i++) {
				final int j = i;
				TableColumn col = new TableColumn(res.getMetaData().getColumnName(i + 1));
				col.setCellValueFactory(
						new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
							public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
								return new SimpleStringProperty(param.getValue().get(j).toString());
							}
						});

				anzeigeTwo.getColumns().addAll(col);

			}

			// Ergebnisse verarbeiten
			while (res.next()) { // Cursor bewegen
				ObservableList<String> row = FXCollections.observableArrayList();
				for (int i = 1; i <= res.getMetaData().getColumnCount(); i++) {
					// Iterate Column
					row.add(res.getString(i));

				}

				data.add(row);
			}
			updateBoxTwo.setItems(data);
			anzeigeTwo.setItems(data);
			con.commit();
		

		} catch (PSQLException se) {
			con.rollback();
			System.err.println("Error");
			spiellabel.setText("Error. Bitte korrigieren Sie ihre Eingabe.");

		} catch (Exception se) {
			con.rollback();
			System.err.println("Error");
			spiellabel.setText("Error. Bitte korrigieren Sie ihre Eingabe.");

		}

	}

	/**
	 * Methode für das Statement "Update" Ändert Datensätze
	 * 
	 * @param event
	 * @throws SQLException 
	 */
	@FXML
	public void update(ActionEvent event) throws SQLException {

		try {
			status2.setText("Datensatz wurde erfolgreich geaendert!");
			aktualisieren(event);
			Connection con = ds.getConnection();
			// Abfrage vorbereiten und ausführen
			Statement st = con.createStatement();
			con.setAutoCommit(false);
			st.executeUpdate("UPDATE Spieler SET position=\'" + pos.getText()
					+ "\', gehalt=\'" + cash.getText() + "\', von=\'" + von.getText() +"\', bis=\'" + bis.getText() + "\' WHERE persnr=\'" + updatear[0] + "\'");
			
			
		con.commit();
		} catch (SQLException se) {
			con.rollback();
			System.err.println("Update - Error");
			se.printStackTrace(System.err);
		}

	}

	
	
	/**
	 * Methode für das Statement "Update" Ändert Datensätze
	 * 
	 * @param event
	 * @throws SQLException 
	 */
	@FXML
	public void updateSpiel(ActionEvent event) throws SQLException {

		try {
			//status2.setText("Datensatz wurde erfolgreich geaendert!");
			aktualisierenTwo(event);
			Connection con = ds.getConnection();
			// Abfrage vorbereiten und ausführen
			Statement st = con.createStatement();
			con.setAutoCommit(false);
			st.executeUpdate("UPDATE Spiel SET datum=\'" + dateField.getText()
					+ "\', bezeichnung=\'" + bezField.getText() + "\', gegner=\'" + gegField.getText() +"\', ergebnis=\'" + ergField.getValue() + "\' WHERE datum=\'" + updatear[0] + "\'");
			
			
		con.commit();
		} catch (SQLException se) {
			con.rollback();
			System.err.println("Update - Error");
			se.printStackTrace(System.err);
		}

	}

	
	/**
	 * Methode für das Statement "Delete" Löscht Datensätze aus der Tabelle
	 * Damit delete eines datensatzes in der Personen Tabelle musste ich zuerst
	 * den Verweis zu mitarbeiter in der Schokodb löschen
	 * 
	 * @param event
	 * @throws SQLException 
	
	@FXML
	public void delete(ActionEvent event) throws SQLException {

		try {
			status2.setText("Datensatz wurde erfolgreich geloescht!");
			aktualisieren(event);
			Connection con = ds.getConnection();
			// Abfrage vorbereiten und ausführen
			Statement st = con.createStatement();
			con.setAutoCommit(false);
			st.executeUpdate("DELETE FROM person WHERE nummer=\'" + updatear[0] + "\'");
			con.commit();

		} catch (SQLException se) {
			con.rollback();
			System.err.println("Delete - Error");
			se.printStackTrace(System.err);
		}

	}
	 */

	/**
	 * Methode für die Auswahl der Datensätze bei Update und Insert ComboBox
	 * gibt Daten TextField
	 * 
	 * @param event
	 */
	@FXML
	public void auswahl(ActionEvent event) {

		String input = updateBox.getValue() + "";
		input = input.substring(1, input.length() - 1);
		updatear = input.split(", ");
		updateB.setDisable(false);
	
		pnr.setText(updatear[0]);
		pos.setText(updatear[1]);
		cash.setText(updatear[2]);
		von.setText(updatear[3]);
		bis.setText(updatear[4]);
	
	}
	
	
	/**
	 * Methode für die Auswahl der Datensätze bei Update und Insert ComboBox
	 * gibt Daten TextField
	 * 
	 * @param event
	 */
	@SuppressWarnings("unchecked")
	@FXML
	public void auswahlTwo(ActionEvent event) {

		String input = updateBoxTwo.getValue() + "";
		input = input.substring(1, input.length() - 1);
		updatear = input.split(", ");
//		updateB.setDisable(false);
//		deleteB.setDisable(false);
		dateField.setText(updatear[0]);
		bezField.setText(updatear[1]);
		gegField.setText(updatear[2]);
		ergField.setValue(updatear[3]);
		
	
	}

	/**
	 * Löscht Anzeige und Tabelle
	 * 
	 * @param event
	 * @throws SQLException
	 */
	@FXML
	public void aktualisieren(ActionEvent event) throws SQLException {
		anzeigeB.setDisable(false);
		dbeinfugen.setDisable(false);
		anzeige.getColumns().clear();
		data.clear();
		data = FXCollections.observableArrayList();
		connect(null);

	}
	
	/**
	 * Löscht Anzeige und Tabelle
	 * 
	 * @param event
	 * @throws SQLException
	 */
	@FXML
	public void aktualisierenTwo(ActionEvent event) throws SQLException {
		dbanzeigen.setDisable(false);
		dbeinfuegen.setDisable(false);
		anzeigeTwo.getColumns().clear();
		data.clear();
		data = FXCollections.observableArrayList();
		connect(null);

	}
	
}
