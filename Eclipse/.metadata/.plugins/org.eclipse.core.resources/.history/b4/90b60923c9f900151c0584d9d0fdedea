package application;


import java.net.URL;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ResourceBundle;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import org.postgresql.ds.PGSimpleDataSource;
import org.postgresql.util.PSQLException;

import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.Tab;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableColumn.CellDataFeatures;
import javafx.scene.control.TablePosition;
import javafx.scene.control.TableView;
import javafx.scene.control.TableView.TableViewSelectionModel;
import javafx.scene.control.TextField;
import javafx.util.Callback;

/**
 * 
 * @author Matthias Mischek
 * Controller
 */
public class Controller implements Initializable{

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub
		
	}
	
	@SuppressWarnings("rawtypes")
	private ObservableList<ObservableList> data;
	
	@SuppressWarnings("rawtypes")
	@FXML
	private TableView ausgabe, updateTable, anzeige;
	
	@FXML
	private TextField eingabe, updateTextfield;
	
	@FXML
	private Button start, connectButton, auswahl;
	
	@FXML
	private TextField ip, dbName, user, passwort, kname, kadresse, ktelnummer;
	
	@FXML
	private Label status, selectText;
	
	@FXML
	private Tab abfragePane, updatePane, anzeigePane;
	
	private PGSimpleDataSource ds;
	
	@FXML
	private ComboBox updateBox;


	public void connect(ActionEvent event){
		
		data = FXCollections.observableArrayList();
		
		// Datenquelle erzeugen und konfigurieren
		ds = new PGSimpleDataSource();
		ds.setServerName(ip.getText());
		ds.setDatabaseName(dbName.getText());
		ds.setUser(user.getText());
		ds.setPassword(passwort.getText());
		// Verbindung herstellen
		try(
			Connection con = ds.getConnection();
			
			){
			
			status.setText("Verbunden!");
			abfragePane.setDisable(false);
			updatePane.setDisable(false);
			anzeigePane.setDisable(false);
			
			}catch (Exception se){
			System.err.println("Error");
			status.setText("Bitter erneut versuchen.");
			
		}
		
	}
	

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public void abfrage(ActionEvent event){
		
		try(
			Connection con = ds.getConnection();
			// Abfrage vorbereiten und ausführen
			Statement st = con.createStatement();
				ResultSet rs = st.executeQuery("select " + eingabe.getText());
			
			){
			
			
			for(int i=0 ; i<rs.getMetaData().getColumnCount(); i++){
                final int j = i;
				TableColumn col = new TableColumn(rs.getMetaData().getColumnName(i+1));
                col.setCellValueFactory(new Callback<CellDataFeatures<ObservableList,String>,ObservableValue<String>>(){                    
                    public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {                                                                                              
                        return new SimpleStringProperty(param.getValue().get(j).toString());                        
                    }                    
                });

                ausgabe.getColumns().addAll(col); 
                updateTable.getColumns().addAll(col); 
    
            }
			
			// Ergebnisse verarbeiten
			while (rs.next()) { // Cursor bewegen
				ObservableList<String> row = FXCollections.observableArrayList();
                for(int i=1 ; i<=rs.getMetaData().getColumnCount(); i++){
                    //Iterate Column
                    row.add(rs.getString(i));
                    
                }
              
                data.add(row);
			}
			
			ausgabe.setItems(data);
			updateTable.setItems(data);
			
			
		}catch (PSQLException se){
			System.err.println("Error");
			selectText.setText("Error. Bitte korrigieren Sie ihre Eingabe.");
			
		}
		catch (Exception se){
			System.err.println("Error");
			selectText.setText("Error. Bitte korrigieren Sie ihre Eingabe.");
			
		}
			
		
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public void insert(ActionEvent event){
		
		try(
			Connection con = ds.getConnection();
			// Abfrage vorbereiten und ausführen
			Statement st = con.createStatement();
				ResultSet rs = st.executeQuery("INSERT INTO Kunde VALUES ('"+ kname.getText() +"', '"+ kadresse.getText()+"', '"+ ktelnummer.getText() +"'");
			
			){
			
		
			
			
		}catch (PSQLException se){
			System.err.println("Error");
			selectText.setText("Error. Bitte korrigieren Sie ihre Eingabe.");
			
		}
		catch (Exception se){
			System.err.println("Error");
			selectText.setText("Error. Bitte korrigieren Sie ihre Eingabe.");
			
		}
			
		
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public void anzeige(ActionEvent event){
		
		try(
			Connection con = ds.getConnection();
			// Abfrage vorbereiten und ausführen
			Statement st = con.createStatement();
				ResultSet rs = st.executeQuery("select * from Kunde");
			
			){
			
			
			for(int i=0 ; i<rs.getMetaData().getColumnCount(); i++){
                final int j = i;
				TableColumn col = new TableColumn(rs.getMetaData().getColumnName(i+1));
                col.setCellValueFactory(new Callback<CellDataFeatures<ObservableList,String>,ObservableValue<String>>(){                    
                    public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {                                                                                              
                        return new SimpleStringProperty(param.getValue().get(j).toString());                        
                    }                    
                });

                anzeige.getColumns().addAll(col); 
              
    
            }
			
			// Ergebnisse verarbeiten
			while (rs.next()) { // Cursor bewegen
				ObservableList<String> row = FXCollections.observableArrayList();
                for(int i=1 ; i<=rs.getMetaData().getColumnCount(); i++){
                    //Iterate Column
                    row.add(rs.getString(i));
                    
                }
              
                data.add(row);
			}
			
			anzeige.setItems(data);
			
			
			
		}catch (PSQLException se){
			System.err.println("Error");
			selectText.setText("Error. Bitte korrigieren Sie ihre Eingabe.");
			
		}
		catch (Exception se){
			System.err.println("Error");
			selectText.setText("Error. Bitte korrigieren Sie ihre Eingabe.");
			
		}
	
	
	
	

	}
}
	

	
	

